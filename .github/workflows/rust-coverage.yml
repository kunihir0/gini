name: Rust Coverage

on:
  push:
    branches: [ main, dev, staging ]
  pull_request:
    branches: [ main, dev, staging ]

jobs:
  build_and_test:
    name: Build and Test with Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for gh-pages deployment
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: llvm-tools-preview

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache grcov
        id: cache-grcov
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/grcov
          key: ${{ runner.os }}-grcov

      - name: Install grcov
        if: steps.cache-grcov.outputs.cache-hit != 'true'
        run: cargo install grcov

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Build and run tests
        env:
          LLVM_PROFILE_FILE: "target/coverage/%p-%m.profraw"
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Cinstrument-coverage"
          RUSTDOCFLAGS: "-Cinstrument-coverage"
        run: |
          cargo test --workspace -- --test-threads=8

      - name: Generate coverage report
        run: |
            # Use a separate directory for output
            REPORT_OUTPUT_DIR="target/coverage-report"
            mkdir -p "$REPORT_OUTPUT_DIR"
        
            # Debug info
            echo "Repository contents:"
            ls -la
            echo "Source directory contents:"
            ls -la src || echo "No src directory found at root level"
            echo "Profile files count and location:"
            find target/coverage -name "*.profraw" | wc -l
            find target/coverage -name "*.profraw" | head -n 5
        
            # Explicitly specify profraw files location as an argument
            grcov target/coverage \
              --binary-path ./target/debug \
              --source-dir . \
              --output-path "$REPORT_OUTPUT_DIR" \
              --ignore-not-existing \
              --keep-only 'src/*' \
              --branch \
              --log-level debug \
              --output-types html,cobertura
        
            # Check if any files were processed
            echo "Generated files:"
            find "$REPORT_OUTPUT_DIR"/html -type f | wc -l
            ls -la "$REPORT_OUTPUT_DIR"/html/

      - name: Extract coverage percentage
        id: extract-coverage
        run: |
                REPORT_OUTPUT_DIR="target/coverage-report"
                COVERAGE=$(xmllint --xpath "concat('Coverage: ', 100 * string(//coverage/@line-rate), '%')" "$REPORT_OUTPUT_DIR/cobertura.xml")
                echo "Coverage: $COVERAGE"
                echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/coverage-report/
          if-no-files-found: error

      - name: Create coverage badges
        if: github.ref == 'refs/heads/main'
        run: |
            REPORT_OUTPUT_DIR="target/coverage-report"
            mkdir -p "$REPORT_OUTPUT_DIR/badges" # Badges should also go in the new dir
            # Extract just the number
            COVERAGE_PCT=$(xmllint --xpath "100 * string(//coverage/@line-rate)" "$REPORT_OUTPUT_DIR/cobertura.xml") # <-- Update path
            # Round to integer
            COVERAGE_INT=$(printf "%.0f" $COVERAGE_PCT)
  
            # Colors based on coverage: red < 50% < orange < 70% < yellow < 80% < green
            if [ $COVERAGE_INT -lt 50 ]; then
              COLOR=red
            elif [ $COVERAGE_INT -lt 70 ]; then
              COLOR=orange
            elif [ $COVERAGE_INT -lt 80 ]; then
              COLOR=yellow
            else
              COLOR=green
            fi
  
            # Create a coverage.json file for shields.io
            echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"${COVERAGE_INT}%\",\"color\":\"${COLOR}\"}" > "$REPORT_OUTPUT_DIR/coverage.json"

      - name: Deploy coverage to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
              github_token: ${{ secrets.GITHUB_TOKEN }}
              publish_dir: ./target/coverage-report
              force_orphan: true
              user_name: 'github-actions[bot]'
              user_email: 'github-actions[bot]@users.noreply.github.com'
              commit_message: 'Update coverage report'

      - name: Find Previous Coverage
        if: github.event_name == 'pull_request'
        id: prev-coverage
        run: |
                # Fetch main branch coverage using GitHub API
                REPO="${GITHUB_REPOSITORY}"
                # Assume coverage.json is now published to target/coverage-report/coverage.json
                MAIN_BRANCH_COVERAGE=$(curl -s "https://raw.githubusercontent.com/${REPO}/main/target/coverage-report/coverage.json" | jq -r '.message' || echo "N/A") # <-- Update path
      
                # If we successfully got the coverage value, calculate diff
                if [[ "$MAIN_BRANCH_COVERAGE" != "N/A" ]]; then
                  # Extract current coverage percentage from the new location
                  CURRENT_COVERAGE=$(xmllint --xpath "100 * string(//coverage/@line-rate)" target/coverage-report/cobertura.xml) # <-- Update path
                  CURRENT_COVERAGE_ROUNDED=$(printf "%.1f" $CURRENT_COVERAGE)
      
                  # Extract only the number from main branch coverage (remove the % sign)
                  MAIN_COVERAGE_NUM=$(echo $MAIN_BRANCH_COVERAGE | sed 's/%//')
      
                  # Calculate difference
                  DIFF=$(echo "$CURRENT_COVERAGE_ROUNDED - $MAIN_COVERAGE_NUM" | bc)
      
                  # Format with plus sign for positive values
                  if (( $(echo "$DIFF >= 0" | bc -l) )); then
                    DIFF_FORMATTED="+$DIFF%"
                  else
                    DIFF_FORMATTED="$DIFF%"
                  fi
      
                  echo "diff=$DIFF_FORMATTED" >> $GITHUB_OUTPUT
                else
                  echo "diff=N/A" >> $GITHUB_OUTPUT
                fi

      # Comment on PR with coverage info
      - name: Find Comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Code coverage report

      - name: Create or Update Comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Code coverage report
            ${{ steps.extract-coverage.outputs.coverage }}
            Change: ${{ steps.prev-coverage.outputs.diff }}
            
            [Full HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            Download the report artifact for complete details.
          edit-mode: replace