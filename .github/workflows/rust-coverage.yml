name: Rust Coverage

on:
  push:
    branches: [ main, dev, staging ]
  pull_request:
    branches: [ main, dev, staging ]

jobs:
  build_and_test:
    name: Build and Test with Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: llvm-tools-preview

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install grcov
        run: cargo install grcov

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Build and run tests
        env:
          LLVM_PROFILE_FILE: "target/coverage/%p-%m.profraw"
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Cinstrument-coverage"
          RUSTDOCFLAGS: "-Cinstrument-coverage"
        run: |
          cargo test --workspace

      - name: Generate coverage report
        run: |
          mkdir -p target/coverage
          grcov \
            target/coverage \
            --binary-path target/debug \
            -s . \
            -o target/coverage \
            --keep-only 'src/*' \
            --ignore-not-existing \
            --ignore "/*" \
            --output-types html,cobertura

      - name: Extract coverage percentage
        id: extract-coverage
        run: |
          COVERAGE=$(xmllint --xpath "concat('Coverage: ', 100 * string(//coverage/@line-rate), '%')" target/coverage/cobertura.xml)
          echo "Coverage: $COVERAGE"
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Upload coverage report
        uses: actions/upload-artifact@v4  # Updated to use v4
        with:
          name: coverage-report
          path: target/coverage/
          retention-days: 90
          if-no-files-found: error

      - name: Create coverage badges
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p target/coverage/badges
          # Extract just the number
          COVERAGE_PCT=$(xmllint --xpath "100 * string(//coverage/@line-rate)" target/coverage/cobertura.xml)
          # Round to integer
          COVERAGE_INT=$(printf "%.0f" $COVERAGE_PCT)
          
          # Colors based on coverage: red < 50% < orange < 70% < yellow < 80% < green
          if [ $COVERAGE_INT -lt 50 ]; then
            COLOR=red
          elif [ $COVERAGE_INT -lt 70 ]; then
            COLOR=orange
          elif [ $COVERAGE_INT -lt 80 ]; then
            COLOR=yellow
          else
            COLOR=green
          fi
          
          # Create a coverage.json file for shields.io
          echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"${COVERAGE_INT}%\",\"color\":\"${COLOR}\"}" > target/coverage/coverage.json

      - name: Deploy coverage to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/coverage
          keep_files: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Update coverage report'

      # Comment on PR with coverage info
      - name: Find Comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Code coverage report

      - name: Create or Update Comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Code coverage report
            ${{ steps.extract-coverage.outputs.coverage }}
            
            [Full HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            Download the report artifact for complete details.
          edit-mode: replace