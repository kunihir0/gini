name: Rust Workspace Coverage

on:
  push:
    branches: [ main, dev, staging ]
  pull_request:
    branches: [ main, dev, staging ]

jobs:
  coverage:
    name: Generate Code Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for gh-pages deployment
      pull-requests: write  # Required for PR comments
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: llvm-tools-preview

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install tools
        run: |
          cargo install grcov --force
          sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Build and test with coverage
        env:
          LLVM_PROFILE_FILE: "%p-%m.profraw"
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Cinstrument-coverage"
          RUSTDOCFLAGS: "-Cinstrument-coverage"
        run: cargo test --workspace --all-features

      - name: Generate coverage reports
        run: |
          mkdir -p target/coverage-report
          
          # Use . as the input path to find all profraw files
          grcov . \
            --binary-path ./target/debug \
            -s . \
            --output-path target/coverage-report \
            --ignore-not-existing \
            --keep-only 'crates/gini-core/**' \
            --keep-only 'crates/gini/**' \
            --branch \
            --output-types html,cobertura

      - name: Extract coverage percentage
        id: extract-coverage
        run: |
          COVERAGE_PCT=$(xmllint --xpath "100 * string(//coverage/@line-rate)" "target/coverage-report/cobertura.xml")
          COVERAGE_ROUNDED=$(printf "%.1f" $COVERAGE_PCT)
          echo "coverage=Coverage: ${COVERAGE_ROUNDED}%" >> $GITHUB_OUTPUT
          
          # Calculate integer value for badge
          COVERAGE_INT=$(printf "%.0f" $COVERAGE_PCT)
          
          # Set color based on coverage level
          if [ $COVERAGE_INT -lt 50 ]; then
            COLOR=red
          elif [ $COVERAGE_INT -lt 70 ]; then
            COLOR=orange
          elif [ $COVERAGE_INT -lt 80 ]; then
            COLOR=yellow
          else
            COLOR=green
          fi
          
          # Create badge JSON file
          echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"${COVERAGE_INT}%\",\"color\":\"${COLOR}\"}" > "target/coverage-report/coverage.json"

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/coverage-report/
          if-no-files-found: error

      - name: Deploy coverage to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/coverage-report
          force_orphan: true
          commit_message: 'Update coverage report'

      - name: Compare with Previous Coverage
        if: github.event_name == 'pull_request'
        id: prev-coverage
        run: |
          REPO="${GITHUB_REPOSITORY}"
          # Try to fetch coverage from GitHub Pages
          MAIN_COVERAGE=$(curl -s "https://${GITHUB_REPOSITORY_OWNER}.github.io/$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)/coverage.json" | jq -r '.message' 2>/dev/null || echo "N/A")
          
          if [[ "$MAIN_COVERAGE" != "N/A" ]]; then
            CURRENT_PCT=$(xmllint --xpath "100 * string(//coverage/@line-rate)" "target/coverage-report/cobertura.xml")
            CURRENT_ROUNDED=$(printf "%.1f" $CURRENT_PCT)
            
            # Extract percentage value without % for comparison
            MAIN_PCT=$(echo $MAIN_COVERAGE | sed 's/%//')
            
            # Calculate difference
            DIFF=$(echo "$CURRENT_ROUNDED - $MAIN_PCT" | bc)
            
            if (( $(echo "$DIFF >= 0" | bc -l) )); then
              echo "diff=+$DIFF%" >> $GITHUB_OUTPUT
            else
              echo "diff=$DIFF%" >> $GITHUB_OUTPUT
            fi
          else
            echo "diff=N/A" >> $GITHUB_OUTPUT
          fi

      - name: Find Comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Code Coverage Report

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Code Coverage Report
            ${{ steps.extract-coverage.outputs.coverage }}
            Change: ${{ steps.prev-coverage.outputs.diff }}
            
            [View HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          edit-mode: replace